"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[99],{6778:function(t,e,a){a.d(e,{Ue:function(){return l},YL:function(){return tv},gJ:function(){return tO},g_:function(){return tT},iw:function(){return f}});var r,n,s,o,p,i=a(2037),u=a(8620).Buffer,m=function(){return(m=Object.assign||function(t){for(var e,a=1,r=arguments.length;a<r;a++)for(var n in e=arguments[a])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function c(t,e,a,r){return new(a||(a=Promise))(function(n,s){function o(t){try{i(r.next(t))}catch(t){s(t)}}function p(t){try{i(r.throw(t))}catch(t){s(t)}}function i(t){t.done?n(t.value):new a(function(e){e(t.value)}).then(o,p)}i((r=r.apply(t,e||[])).next())})}function d(t,e){var a,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw TypeError("Generator is already executing.");for(;o;)try{if(a=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],r=0}finally{a=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}(r=o||(o={}))[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",(s=(n=p||(p={})).CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[s.LEGACY=0]="LEGACY",s[s.V1=1]="V1",s[s.V2=2]="V2";var y={};function f(t,e){y[t]={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e}}function l(t){delete y[t]}function h(t,e,a,r){var n=e.inputParams[t];if(n&&void 0!==n.inputIndexStart){var s=n.inputIndexStart,o=0===n.inputIndexEnd?void 0:void 0===n.inputIndexEnd?s+1:n.inputIndexEnd;if("tensor"===n.type)return N(e.inputNames[n.inputIndexStart],a,r);if("tensors"===n.type)return e.inputNames.slice(s,o).map(function(t){return N(t,a,r)});var p=Array.prototype.slice.call(N(e.inputNames.slice(s)[0],a,r).dataSync());return"number"===n.type?p[0]:p}var i=e.attrParams[t];return i&&i.value}function N(t,e,a){var r=x(t),n=r[0],s=r[1],o=a.currentContextIds.find(function(t){return!!e[b(n,t)]});return void 0!==o?e[b(n,o)][s]:void 0}function g(t,e){var a=x(t),r=a[0],n=a[1];return[b(r,e&&e.currentContextId),n]}function b(t,e){return e?t+"-"+e:t}function x(t){var e=t.lastIndexOf(":");return -1===e?[t,0]:[t.substring(0,e),Number(t.substring(e+1))]}function T(t,e){for(var a=[],r=0;r<t.length;r+=e)a.push(t.slice(r,r+e));return a}var v=Object.freeze({json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),O=Object.freeze({json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),S=Object.freeze({json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"}]}]}),_=Object.freeze({json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]}]}),w=Object.freeze({json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]}),A=Object.freeze({json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),D=Object.freeze({json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]}),E=Object.freeze({json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]}),I=Object.freeze({json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]}),V=Object.freeze({json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),k=Object.freeze({json:[{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),C=Object.freeze({json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]}),z=Object.freeze({json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]}]}),M=Object.freeze({json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]}),F=Object.freeze({json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]}),j=Object.freeze({json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]}]}),R=function(){function t(){var t=[v,O,S,_,w,A,D,V,I,E,k,C,z,M,F,j],e=[].concat.apply([],t.map(function(t){return t.json}));this.opMappers=e.reduce(function(t,e){return t[e.tfOpName]=e,t},{})}return Object.defineProperty(t,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),t.prototype.transformGraph=function(t){var e=this,a=[],r=[],n=t.node.reduce(function(t,n){return t[n.name]=e.mapNode(n),"Placeholder"===n.op&&a.push(t[n.name]),"Const"===n.op&&r.push(t[n.name]),t},{}),s=[],o=[],p=Object.keys(n);return p.forEach(function(t){var e=n[t];e.inputNames.forEach(function(t){var a=g(t)[0];e.inputs.push(n[a]),n[a].children.push(e)}),0===e.inputs.length&&s.push(e)}),p.forEach(function(t){var e=n[t];0===e.children.length&&o.push(e)}),{nodes:n,inputs:s,outputs:o,weights:r,placeholders:a}},t.prototype.mapNode=function(t){var e=y[t.op]||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});var a={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(function(t){return t.startsWith("^")?t.substr(1):t}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(a.inputParams=e.inputs.reduce(function(t,e){return t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t},{})),null!=e.attrs&&(a.attrParams=e.attrs.reduce(function(e,a){var r=a.type,n=void 0;switch(a.type){case"string":void 0===(n=L(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=L(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":void 0===(n=$(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=$(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":void 0===(n=U(t.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(n=U(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":void 0===(n=X(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=X(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":void 0===(n=B(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=B(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":void 0===(n=Y(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=Y(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":void 0===(n=Q(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=Q(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":void 0===(n=K(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=K(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":void 0===(n=G(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=G(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":void 0===(n=W(t.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=W(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw Error("Unsupported param type: "+a.type+" for op: "+t.op)}return e[a.name]={value:n,type:r},e},{})),a},t}();function P(t,e){var a=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){var e=(0,i.OBj)().global;if(void 0!==e.atob)return e.atob(t);if(void 0!==u)return new u(t,"base64").toString();throw Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?a:a.toLowerCase()}function L(t,e,a,r){void 0===r&&(r=!1);var n=t[e];return null!=n?P(n.s,r):a}function B(t,e,a){var r=t[e];return r?r.b:a}function U(t,e,a){var r=t[e]||{},n=null!=r.i?r.i:null!=r.f?r.f:a;return"number"==typeof n?n:parseInt(n,10)}function q(t){switch("string"==typeof t&&(t=o[t]),t){case o.DT_FLOAT:return"float32";case o.DT_INT32:case o.DT_INT64:return"int32";case o.DT_BOOL:return"bool";case o.DT_DOUBLE:return"float32";case o.DT_STRING:return"string";default:return null}}function G(t,e,a){var r=t[e];return r&&r.type?q(r.type):a}function W(t,e,a){var r=t[e];return r&&r.list&&r.list.type?r.list.type.map(function(t){return q(t)}):a}function H(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(function(t){return"number"==typeof t.size?t.size:parseInt(t.size,10)}):[]}function Q(t,e,a){var r=t[e];return r&&r.shape?H(r.shape):a}function X(t,e,a){var r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(function(t){return"number"==typeof t?t:parseInt(t,10)}):a}function $(t,e,a,r){void 0===r&&(r=!1);var n=t[e];return n&&n.list&&n.list.s?n.list.s.map(function(t){return P(t,r)}):a}function K(t,e,a){var r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map(function(t){return H(t)}):a}function Y(t,e,a){var r=t[e];return r&&r.list&&r.list.b?r.list.b:a}var J=function(){function t(t,e,a){var r=this;this.node=t,this.tensorMap=e,this.context=a,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(function(t){return r.getInput(t)}),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(function(t,e){return t[e]=r.getAttr(e),t},{}))}return t.prototype.getInput=function(t){return N(t,this.tensorMap,this.context)},t.prototype.getAttr=function(t,e){var a=this.node.rawAttrs[t];if(null!=a.tensor)return N(t,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return U(this.node.rawAttrs,t,e);if(null!=a.s)return L(this.node.rawAttrs,t,e);if(null!=a.b)return B(this.node.rawAttrs,t,e);if(null!=a.shape)return Q(this.node.rawAttrs,t,e);if(null!=a.type)return G(this.node.rawAttrs,t,e);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return X(this.node.rawAttrs,t,e);if(null!=a.list.s)return $(this.node.rawAttrs,t,e);if(null!=a.list.shape)return K(this.node.rawAttrs,t,e);if(null!=a.list.b)return Y(this.node.rawAttrs,t,e);if(null!=a.list.type)return W(this.node.rawAttrs,t,e)}return e},t}(),Z=function(t,e,a){switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[(0,i.IHx)(h("a",t,e,a),h("b",t,e,a))];case"AddN":return[(0,i.QBD)(h("tensors",t,e,a))];case"FloorMod":case"Mod":return[(0,i.wQq)(h("a",t,e,a),h("b",t,e,a))];case"Mul":return[(0,i.dC7)(h("a",t,e,a),h("b",t,e,a))];case"RealDiv":case"Div":return[(0,i.hiC)(h("a",t,e,a),h("b",t,e,a))];case"FloorDiv":return[(0,i.qPi)(h("a",t,e,a),h("b",t,e,a))];case"Sub":return[(0,i.luU)(h("a",t,e,a),h("b",t,e,a))];case"Minimum":return[(0,i.LTh)(h("a",t,e,a),h("b",t,e,a))];case"Maximum":return[(0,i.gWQ)(h("a",t,e,a),h("b",t,e,a))];case"Pow":return[(0,i.sQ3)(h("a",t,e,a),h("b",t,e,a))];case"SquaredDifference":return[(0,i.$i)(h("a",t,e,a),h("b",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},tt=function(t,e,a){switch(t.op){case"Abs":case"ComplexAbs":return[(0,i.WnP)(h("x",t,e,a))];case"Acos":return[(0,i.Khb)(h("x",t,e,a))];case"Acosh":return[(0,i.__u)(h("x",t,e,a))];case"Asin":return[(0,i.ZRM)(h("x",t,e,a))];case"Asinh":return[(0,i.VfV)(h("x",t,e,a))];case"Atan":return[(0,i.z4N)(h("x",t,e,a))];case"Atan2":return[(0,i.fvJ)(h("x",t,e,a),h("y",t,e,a))];case"Atanh":return[(0,i.C80)(h("x",t,e,a))];case"Ceil":return[(0,i.mDi)(h("x",t,e,a))];case"Complex":return[(0,i.PYB)(h("real",t,e,a),h("imag",t,e,a))];case"Cos":return[(0,i.mCk)(h("x",t,e,a))];case"Cosh":return[(0,i.f9Y)(h("x",t,e,a))];case"Elu":return[(0,i.pyx)(h("x",t,e,a))];case"Erf":return[(0,i.qNN)(h("x",t,e,a))];case"Exp":return[(0,i.Qqt)(h("x",t,e,a))];case"Expm1":return[(0,i.t$B)(h("x",t,e,a))];case"Floor":return[(0,i.GWj)(h("x",t,e,a))];case"Log":return[(0,i.cM7)(h("x",t,e,a))];case"Log1p":return[(0,i.Krr)(h("x",t,e,a))];case"Imag":return[(0,i.asL)(h("x",t,e,a))];case"Neg":return[(0,i.W76)(h("x",t,e,a))];case"Reciprocal":return[(0,i.M25)(h("x",t,e,a))];case"Real":return[(0,i.kwC)(h("x",t,e,a))];case"Relu":return[(0,i.UYe)(h("x",t,e,a))];case"Round":return[(0,i.NMM)(h("x",t,e,a))];case"Selu":return[(0,i.U8D)(h("x",t,e,a))];case"Sigmoid":return[(0,i.XD2)(h("x",t,e,a))];case"Sin":return[(0,i.O$l)(h("x",t,e,a))];case"Sign":return[(0,i.Xxe)(h("x",t,e,a))];case"Sinh":return[(0,i.R_K)(h("x",t,e,a))];case"Softplus":return[(0,i.Wvh)(h("x",t,e,a))];case"Sqrt":return[(0,i._b3)(h("x",t,e,a))];case"Square":return[(0,i.h62)(h("x",t,e,a))];case"Tanh":return[(0,i.AEp)(h("x",t,e,a))];case"Tan":return[(0,i.ORZ)(h("x",t,e,a))];case"Relu6":case"ClipByValue":return[(0,i.iUl)(h("x",t,e,a),h("clipValueMin",t,e,a),h("clipValueMax",t,e,a))];case"Rsqrt":return[(0,i.bp0)(N(t.inputNames[0],e,a))];case"Prod":return[(0,i.WVs)(h("x",t,e,a),h("axes",t,e,a))];case"LeakyRelu":return[(0,i.hi7)(h("x",t,e,a),h("alpha",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},te=function(){function t(e,a,r,n,s,o,p){this.name=e,this.dtype=a,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.id=t.nextId++}return Object.defineProperty(t.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),t.prototype.clearAndClose=function(){this.tensors.forEach(function(t){return t.tensor.dispose()}),this.tensors=[],this.closed_=!0},t.prototype.size=function(){return this.tensors.length},t.prototype.read=function(t){if(this.closed_)throw Error("TensorArray "+this.name+" has already been closed.");if(t<0||t>=this.tensors.length)throw Error("Tried to read from index "+t+", but array size is: "+this.tensors.length);var e=this.tensors[t];if(e.cleared)throw Error("TensorArray "+this.name+": Could not read index "+t+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor},t.prototype.readMany=function(t){var e=this;return t.map(function(t){return e.read(t)})},t.prototype.write=function(t,e){if(this.closed_)throw Error("TensorArray "+this.name+" has already been closed.");if(t<0||!this.dynamicSize&&t>=this.maxSize)throw Error("Tried to write to index "+t+", but array is not resizeable and size is: "+this.maxSize);var a=this.tensors[t]||{};if(e.dtype!==this.dtype)throw Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+",\n          because the value dtype is "+e.dtype+", but TensorArray dtype is "+this.dtype+".");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,e.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+t+"."),a&&a.read)throw Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been read.");if(a&&a.written)throw Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been written.");a.tensor=e,a.written=!0,this.tensors[t]=a},t.prototype.writeMany=function(t,e){var a=this;if(t.length!==e.length)throw Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+t.length+" is not the same as tensors size: "+e.length+".");t.forEach(function(t,r){return a.write(t,e[r])})},t.prototype.gather=function(t,e){if(e&&e!==this.dtype)throw Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+e);if(!t){t=[];for(var a=0;a<this.size();a++)t.push(a)}if(0===t.length)return(0,i.XeE)([],[0].concat(this.elementShape));var r=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),(0,i.knu)(r,0)},t.prototype.concat=function(t){if(t&&t!==this.dtype)throw Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+t);if(0===this.size())return(0,i.XeE)([],[0].concat(this.elementShape));for(var e=[],a=0;a<this.size();a++)e.push(a);var r=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+r[0].shape+")"),(0,i.zoF)(r,0)},t.prototype.scatter=function(t,e){if(e.dtype!==this.dtype)throw Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);if(t.length!==e.shape[0])throw Error("Expected len(indices) == tensor.shape[0], but saw: "+t.length+" vs. "+e.shape[0]);var a=Math.max.apply(Math,t);if(!this.dynamicSize&&a>=this.maxSize)throw Error("Max index must be < array size ("+a+"  vs. "+this.maxSize+")");this.writeMany(t,(0,i.HHK)(e,0))},t.prototype.split=function(t,e){var a=this;if(e.dtype!==this.dtype)throw Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);var r=0,n=t.map(function(t){return r+=t});if(r!==e.shape[0])throw Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+e.shape);if(!this.dynamicSize&&t.length!==this.maxSize)throw Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+t.length+"), and the TensorArray is not marked as dynamically resizeable");var s=0===r?0:e.size/r,o=[];(0,i.lub)(function(){e=e.reshape([1,r,s]);for(var p=0;p<t.length;++p){var u=[0,0===p?0:n[p-1],0],m=[1,t[p],s];o[p]=(0,i.tPi)(e,u,m).reshape(a.elementShape)}return o});for(var p=[],u=0;u<t.length;u++)p[u]=u;this.writeMany(p,o)},t.prototype.assertShapesMatchAllowUndefinedSize=function(t,e,a){void 0===a&&(a=""),i.D5U.assert(this.shapesEqualAllowUndefinedSize(t,e),function(){return a+" Shapes "+t+" and "+e+" must match"})},t.prototype.shapesEqualAllowUndefinedSize=function(t,e){if(t.length!==e.length)return!1;for(var a=0;a<t.length;a++)if(-1!==t[a]&&-1!==e[a]&&t[a]!==e[a])return!1;return!0},t.nextId=0,t}(),ta=function(t,e,a){var r,n;switch(t.op){case"Conv1D":var s=h("stride",t,e,a),o=h("pad",t,e,a),p=h("dataFormat",t,e,a).toUpperCase(),u=h("dilation",t,e,a);return[(0,i.PAt)(h("x",t,e,a),h("filter",t,e,a),s,o,p,u)];case"Conv2D":s=h("strides",t,e,a),o=h("pad",t,e,a),p=h("dataFormat",t,e,a).toUpperCase();var m=h("dilations",t,e,a);return[(0,i.Tek)(h("x",t,e,a),h("filter",t,e,a),[s[1],s[2]],o,p,[m[1],m[2]])];case"_FusedConv2D":var c=(r=h("fusedOps",t,e,a))[0],d=r[1],y="prelu"===d,f=h("numArgs",t,e,a);if("biasadd"===c){if(y&&2!==f)throw Error("Fused Conv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!y&&1!==f)throw Error("Fused Conv2d with BiasAdd must have one extra argument: bias.")}if("fusedbatchnorm"===c)throw Error("Fused Conv2d with FusedBatchNorm is not supported.");s=h("strides",t,e,a),o=h("pad",t,e,a),p=h("dataFormat",t,e,a).toUpperCase(),m=h("dilations",t,e,a);var l=(n=h("args",t,e,a))[0],N=n[1];return[i.imm.conv2d({x:h("x",t,e,a),filter:h("filter",t,e,a),strides:[s[1],s[2]],pad:o,dataFormat:p,dilations:[m[1],m[2]],bias:l,activation:d,preluActivationWeights:N})];case"Conv2DBackpropInput":case"Conv2dTranspose":var g=h("outputShape",t,e,a);return s=h("strides",t,e,a),o=h("pad",t,e,a),[(0,i.bc)(h("x",t,e,a),h("filter",t,e,a),g,[s[1],s[2]],o)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":return s=h("strides",t,e,a),o=h("pad",t,e,a),m=h("dilations",t,e,a),p=h("dataFormat",t,e,a).toUpperCase(),[(0,i.B10)(h("input",t,e,a),h("filter",t,e,a),[s[1],s[2]],o,p,[m[1],m[2]])];case"Conv3D":return s=h("strides",t,e,a),o=h("pad",t,e,a),p=h("dataFormat",t,e,a).toUpperCase(),m=h("dilations",t,e,a),[(0,i.pdZ)(h("x",t,e,a),h("filter",t,e,a),[s[1],s[2],s[3]],o,p,[m[1],m[2],m[3]])];case"AvgPool":s=h("strides",t,e,a),o=h("pad",t,e,a);var b=h("kernelSize",t,e,a);return[(0,i.wS1)(h("x",t,e,a),[b[1],b[2]],[s[1],s[2]],o)];case"MaxPool":return s=h("strides",t,e,a),o=h("pad",t,e,a),b=h("kernelSize",t,e,a),[(0,i._sB)(h("x",t,e,a),[b[1],b[2]],[s[1],s[2]],o)];case"AvgPool3D":return s=h("strides",t,e,a),o=h("pad",t,e,a),b=h("kernelSize",t,e,a),[(0,i.uR5)(h("x",t,e,a),[b[1],b[2],b[3]],[s[1],s[2],s[3]],o)];case"MaxPool3D":return s=h("strides",t,e,a),o=h("pad",t,e,a),b=h("kernelSize",t,e,a),[(0,i.YQQ)(h("x",t,e,a),[b[1],b[2],b[3]],[s[1],s[2],s[3]],o)];default:throw TypeError("Node type "+t.op+" is not implemented")}},tr=function(t,e,a){switch(t.op){case"Fill":var r=h("shape",t,e,a),n=h("dtype",t,e,a),s=h("value",t,e,a);return[(0,i.hlL)(r,s,n)];case"LinSpace":var o=h("start",t,e,a),p=h("stop",t,e,a),u=h("num",t,e,a);return[(0,i.SX3)(o,p,u)];case"Multinomial":var m=h("logits",t,e,a),c=h("numSamples",t,e,a),d=h("seed",t,e,a);return[(0,i.SJ_)(m,c,d)];case"OneHot":var y=h("indices",t,e,a),f=h("depth",t,e,a),l=h("onValue",t,e,a),N=h("offValue",t,e,a);return[(0,i.lfX)(y,f,l,N)];case"Ones":return[(0,i.iUs)(h("shape",t,e,a),h("dtype",t,e,a))];case"OnesLike":return[(0,i.JpU)(h("x",t,e,a))];case"RandomUniform":return[(0,i.LGj)(h("shape",t,e,a),h("minval",t,e,a),h("maxval",t,e,a),h("dtype",t,e,a))];case"Range":o=h("start",t,e,a);var g=h("stop",t,e,a),b=h("step",t,e,a);return[(0,i.w6H)(o,g,b,h("dtype",t,e,a))];case"TruncatedNormal":r=h("shape",t,e,a);var x=h("mean",t,e,a),T=h("stdDev",t,e,a);return d=h("seed",t,e,a),[(0,i.Xu6)(r,x,T,h("dtype",t,e,a),d)];case"Zeros":return[(0,i.lls)(h("shape",t,e,a),h("dtype",t,e,a))];case"ZerosLike":return[(0,i.P84)(h("x",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},tn=function(t,e,a){if("TopKV2"===t.op){var r=h("x",t,e,a),n=h("k",t,e,a),s=h("sorted",t,e,a),o=(0,i.hg7)(r,n,s);return[o.values,o.indices]}throw TypeError("Node type "+t.op+" is not implemented")},ts=function(t,e,a){switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":var r=h("default",t,e,a);return[N(t.name,e,a)||r];case"Placeholder":return[N(t.name,e,a)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[h("x",t,e,a).clone()];case"IdentityN":return h("x",t,e,a).map(function(t){return t.clone()});case"Shape":return[(0,i.RRF)(h("x",t,e,a).shape,"int32")];case"ShapeN":return h("x",t,e,a).map(function(t){return(0,i.RRF)(t.shape)});case"Size":return[(0,i.iD$)(h("x",t,e,a).size,"int32")];case"Rank":return[(0,i.iD$)(h("x",t,e,a).rank,"int32")];case"NoOp":return[];case"Print":var n=h("x",t,e,a),s=h("data",t,e,a),o=h("message",t,e,a),p=h("summarize",t,e,a);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(var u=0;u<s.length;u++)console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0,p));return[n];default:throw TypeError("Node type "+t.op+" is not implemented")}},to=function(t,e,a){switch(t.op){case"ResizeBilinear":var r=h("images",t,e,a),n=h("size",t,e,a),s=h("alignCorners",t,e,a);return[i.BHj.resizeBilinear(r,[n[0],n[1]],s)];case"ResizeNearestNeighbor":return r=h("images",t,e,a),n=h("size",t,e,a),s=h("alignCorners",t,e,a),[i.BHj.resizeNearestNeighbor(r,[n[0],n[1]],s)];case"CropAndResize":var o=h("image",t,e,a),p=h("boxes",t,e,a),u=h("boxInd",t,e,a),m=h("cropSize",t,e,a),c=h("method",t,e,a),d=h("extrapolationValue",t,e,a);return[i.BHj.cropAndResize(o,p,u,m,c,d)];default:throw TypeError("Node type "+t.op+" is not implemented")}},tp=function(t,e,a){switch(t.op){case"Equal":return[(0,i.DgJ)(h("a",t,e,a),h("b",t,e,a))];case"NotEqual":return[(0,i.Quu)(h("a",t,e,a),h("b",t,e,a))];case"Greater":return[(0,i.pjt)(h("a",t,e,a),h("b",t,e,a))];case"GreaterEqual":return[(0,i.brS)(h("a",t,e,a),h("b",t,e,a))];case"Less":return[(0,i.d9m)(h("a",t,e,a),h("b",t,e,a))];case"LessEqual":return[(0,i.zN1)(h("a",t,e,a),h("b",t,e,a))];case"LogicalAnd":return[(0,i.HvI)(h("a",t,e,a),h("b",t,e,a))];case"LogicalNot":return[(0,i.hJK)(h("a",t,e,a))];case"LogicalOr":return[(0,i.K5V)(h("a",t,e,a),h("b",t,e,a))];case"Select":return[(0,i.arb)(h("condition",t,e,a),h("a",t,e,a),h("b",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},ti=function(t,e,a){switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[(0,i.OI3)(h("a",t,e,a),h("b",t,e,a),h("transposeA",t,e,a),h("transposeB",t,e,a))];case"Transpose":return[(0,i.p4s)(h("x",t,e,a),h("perm",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},tu=function(t,e,a){switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[(0,i.tgs)(h("x",t,e,a),h("mean",t,e,a),h("variance",t,e,a),h("offset",t,e,a),h("scale",t,e,a),h("epsilon",t,e,a))];case"LRN":return[(0,i.G9k)(h("x",t,e,a),h("radius",t,e,a),h("bias",t,e,a),h("alpha",t,e,a),h("beta",t,e,a))];case"Softmax":return[(0,i.XAC)(h("x",t,e,a))];case"LogSoftmax":return[(0,i.CmS)(h("x",t,e,a))];case"SparseToDense":return[(0,i.ers)(h("sparseIndices",t,e,a),h("outputShape",t,e,a),h("sparseValues",t,e,a),h("defaultValue",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},tm=function(t,e,a){switch(t.op){case"Max":var r=h("axis",t,e,a),n=h("keepDims",t,e,a);return[(0,i.Fp7)(h("x",t,e,a),r,n)];case"Mean":return r=h("axis",t,e,a),n=h("keepDims",t,e,a),[(0,i.J69)(h("x",t,e,a),r,n)];case"Min":return r=h("axis",t,e,a),n=h("keepDims",t,e,a),[(0,i.VV$)(h("x",t,e,a),r,n)];case"Sum":return r=h("axis",t,e,a),n=h("keepDims",t,e,a),[(0,i.Smz)(h("x",t,e,a),r,n)];case"All":return r=h("axis",t,e,a),n=h("keepDims",t,e,a),[(0,i.$6P)(h("x",t,e,a),r,n)];case"Any":return r=h("axis",t,e,a),n=h("keepDims",t,e,a),[(0,i.YjB)(h("x",t,e,a),r,n)];case"ArgMax":return r=h("axis",t,e,a),[(0,i.NqF)(h("x",t,e,a),r)];case"ArgMin":return r=h("axis",t,e,a),[(0,i.vHJ)(h("x",t,e,a),r)];case"Prod":return r=h("axis",t,e,a),n=h("keepDims",t,e,a),[(0,i.WVs)(h("x",t,e,a),r,n)];default:throw TypeError("Node type "+t.op+" is not implemented")}},tc=function(t,e,a){switch(t.op){case"ConcatV2":case"Concat":var r=h("axis",t,e,a),n=h("tensors",t,e,a);return[(0,i.zoF)(n,r)];case"GatherV2":case"Gather":r=h("axis",t,e,a);var s=h("x",t,e,a),o=h("indices",t,e,a);return[(0,i.Iqj)(s,o.asType("int32"),r)];case"ReverseV2":case"Reverse":return r=h("axis",t,e,a),s=h("x",t,e,a),[(0,i.GYS)(s,r)];case"Slice":var p=h("begin",t,e,a),u=h("size",t,e,a);return[(0,i.tPi)(h("x",t,e,a),p,u)];case"StridedSlice":p=h("begin",t,e,a);var m=h("end",t,e,a),c=h("strides",t,e,a),d=h("beginMask",t,e,a),y=h("endMask",t,e,a),f=h("ellipsisMask",t,e,a),l=h("newAxisMask",t,e,a),N=h("shrinkAxisMask",t,e,a),g=h("x",t,e,a);if(1===p.length&&g.shape.length>1)for(var b=1;b<g.shape.length;b++)p.push(0),m.push(g.shape[b]),c.push(c[0]);return[(0,i.NXj)(g,p,m,c,d,y,f,l,N)];case"Pack":return(0,i.lub)(function(){var r=h("axis",t,e,a),n=h("tensors",t,e,a),s=n[0].shape,o=n[0].squeeze().shape,p=n.map(function(t){var e=i.D5U.arraysEqual(t.shape,s);if(!e&&!i.D5U.arraysEqual(t.squeeze().shape,o))throw Error("the input tensors shape does not match");return e?t:t.reshape(s)});return[(0,i.knu)(p,r)]});case"Unpack":return(0,i.lub)(function(){var r=h("axis",t,e,a),n=h("tensor",t,e,a);return(0,i.HHK)(n,r)});case"Tile":var x=h("reps",t,e,a);return[(0,i.Gg6)(h("x",t,e,a),x)];case"Split":case"SplitV":r=h("axis",t,e,a);var T=h("numOrSizeSplits",t,e,a);return(0,i.Vl2)(h("x",t,e,a),T,r);case"ScatterNd":o=h("indices",t,e,a);var v=h("values",t,e,a),O=h("shape",t,e,a);return[(0,i.snQ)(o,v,O)];case"GatherNd":var S=h("x",t,e,a);return o=h("indices",t,e,a),[(0,i.dbB)(S,o)];case"SparseToDense":o=h("sparseIndices",t,e,a),O=h("outputShape",t,e,a);var _=h("sparseValues",t,e,a),w=h("defaultValue",t,e,a);return[(0,i.ers)(o,_,O,_.dtype===w.dtype?w:w.asType(_.dtype))];default:throw TypeError("Node type "+t.op+" is not implemented")}},td=function(t,e,a){switch(t.op){case"FFT":return[(0,i.kp_)(h("x",t,e,a))];case"IFFT":return[(0,i.Sxn)(h("x",t,e,a))];case"RFFT":return[(0,i.QEs)(h("x",t,e,a))];case"IRFFT":return[(0,i.wx0)(h("x",t,e,a))];default:throw TypeError("Node type "+t.op+" is not implemented")}},ty=function(t,e,a){switch(t.op){case"Cast":return[(0,i.pju)(h("x",t,e,a),h("dtype",t,e,a))];case"ExpandDims":var r=h("axis",t,e,a);return[(0,i.dt4)(h("x",t,e,a),r)];case"Squeeze":return r=h("axis",t,e,a),[(0,i.L9e)(h("x",t,e,a),r)];case"Reshape":return[(0,i.XLQ)(h("x",t,e,a),h("shape",t,e,a))];case"PadV2":case"Pad":return[(0,i.vku)(h("x",t,e,a),T(h("padding",t,e,a),2),h("constantValue",t,e,a))];case"SpaceToBatchND":var n=h("blockShape",t,e,a),s=T(h("paddings",t,e,a),2);return[(0,i.fBT)(h("x",t,e,a),n,s)];case"BatchToSpaceND":n=h("blockShape",t,e,a);var o=T(h("crops",t,e,a),2);return[(0,i.E4h)(h("x",t,e,a),n,o)];case"DepthToSpace":var p=h("blockSize",t,e,a),u=h("dataFormat",t,e,a).toUpperCase();return[(0,i.nTT)(h("x",t,e,a),p,u)];default:throw TypeError("Node type "+t.op+" is not implemented")}};function tf(t,e,a){var r=function(t,e,a){switch(t.category){case"arithmetic":return Z(t,e,a);case"basic_math":return tt(t,e,a);case"control":return function(t,e,a){return c(this,void 0,void 0,function(){var r,n,s,o,p,u,m,c,y,f,l,g,b,x,T,v,O,S,_,w,A,D,E,I,V,k,C,z,M,F,j,R,P,L;return d(this,function(d){switch(d.label){case 0:switch(t.op){case"LoopCond":return[3,1];case"Switch":return[3,2];case"Merge":return[3,4];case"Enter":return[3,5];case"Exit":return[3,6];case"NextIteration":return[3,7];case"TensorArrayV3":return[3,8];case"TensorArrayWriteV3":return[3,9];case"TensorArrayReadV3":return[3,10];case"TensorArrayGatherV3":return[3,11];case"TensorArrayScatterV3":return[3,12];case"TensorArrayConcatV3":return[3,13];case"TensorArraySplitV3":return[3,14];case"TensorArraySizeV3":return[3,15];case"TensorArrayCloseV3":return[3,16]}return[3,17];case 1:return[2,[h("pred",t,e,a).clone()]];case 2:return r=h("pred",t,e,a),n=h("data",t,e,a),[4,r.data()];case 3:return[2,d.sent()[0]?[void 0,n.clone()]:[n.clone(),void 0]];case 4:return[2,(s=t.inputNames.find(function(t){return void 0!==N(t,e,a)}))?[N(s,e,a).clone()]:void 0];case 5:return o=h("frameName",t,e,a),p=h("tensor",t,e,a),a.enterFrame(o),[2,[p.clone()]];case 6:return u=h("tensor",t,e,a),a.exitFrame(),[2,[u.clone()]];case 7:return m=h("tensor",t,e,a),a.nextIteration(),[2,[m.clone()]];case 8:return c=h("size",t,e,a),y=h("dtype",t,e,a),f=h("elementShape",t,e,a),l=h("dynamicSize",t,e,a),g=h("clearAfterRead",t,e,a),b=h("identicalElementShapes",t,e,a),x=new te(h("name",t,e,a),y,c,f,b,l,g),a.addTensorArray(x),[2,[(0,i.iD$)(x.id),(0,i.iD$)(1)]];case 9:return T=h("tensorArrayId",t,e,a),v=h("index",t,e,a),O=h("tensor",t,e,a),a.getTensorArray(T).write(v,O),[2,[(0,i.iD$)(1)]];case 10:return S=h("tensorArrayId",t,e,a),_=h("index",t,e,a),[2,[a.getTensorArray(S).read(_)]];case 11:return w=h("tensorArrayId",t,e,a),A=h("indices",t,e,a),D=h("dtype",t,e,a),[2,[a.getTensorArray(w).gather(A,D)]];case 12:return E=h("tensorArrayId",t,e,a),I=h("indices",t,e,a),V=h("tensor",t,e,a),a.getTensorArray(E).scatter(I,V),[2,[(0,i.iD$)(1)]];case 13:return k=h("tensorArrayId",t,e,a),C=a.getTensorArray(k),z=h("dtype",t,e,a),[2,[C.concat(z)]];case 14:return M=h("tensorArrayId",t,e,a),F=h("tensor",t,e,a),j=h("lengths",t,e,a),a.getTensorArray(M).split(j,F),[2,[(0,i.iD$)(1)]];case 15:return R=h("tensorArrayId",t,e,a),P=a.getTensorArray(R),[2,[(0,i.iD$)(P.size(),"int32")]];case 16:return L=h("tensorArrayId",t,e,a),a.getTensorArray(L).clearAndClose(),[2,[]];case 17:throw TypeError("Node type "+t.op+" is not implemented")}})})}(t,e,a);case"convolution":return ta(t,e,a);case"creation":return tr(t,e,a);case"dynamic":return function(t,e,a){return c(this,void 0,void 0,function(){var r,n,s,o,p;return d(this,function(u){switch(u.label){case 0:switch(t.op){case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":return[3,1];case"Where":return[3,3];case"ListDiff":return[3,5]}return[3,6];case 1:return r=h("boxes",t,e,a),n=h("scores",t,e,a),s=h("maxOutputSize",t,e,a),o=h("iouThreshold",t,e,a),p=h("scoreThreshold",t,e,a),[4,i.BHj.nonMaxSuppressionAsync(r,n,s,o,p)];case 2:case 4:return[2,[u.sent()]];case 3:return[4,(0,i.itS)(h("condition",t,e,a).asType("bool"))];case 5:return[2,(0,i.ODp)(h("x",t,e,a),h("y",t,e,a))];case 6:throw TypeError("Node type "+t.op+" is not implemented")}})})}(t,e,a);case"evaluation":return tn(t,e,a);case"image":return to(t,e,a);case"graph":return ts(t,e,a);case"logical":return tp(t,e,a);case"matrices":return ti(t,e,a);case"normalization":return tu(t,e,a);case"reduction":return tm(t,e,a);case"slice_join":return tc(t,e,a);case"spectral":return td(t,e,a);case"transformation":return ty(t,e,a);case"custom":var r=y[t.op];if(r&&r.customExecutor)return r.customExecutor(new J(t,e,a));throw TypeError("Custom op "+t.op+" is not registered.");default:throw TypeError("Unknown op '"+t.op+"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}}(t,e,a);return r instanceof Promise?r.then(function(t){return[].concat(t)}):[].concat(r)}var tl=function(){function t(t,e){this.weightMap=t,this.tensorArrayMap=e,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return t.prototype.newFrame=function(t,e){return{id:t,frameName:e,iterationId:0}},Object.defineProperty(t.prototype,"currentContext",{get:function(){return this.contexts},set:function(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),t.prototype.generateCurrentContextIds=function(){for(var t=[],e=0;e<this.contexts.length-1;e++){var a=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(a))}t.push(""),this._currentContextIds=t},t.prototype.contextIdforContexts=function(t){return t?t.map(function(t){return 0===t.id&&0===t.iterationId?"":t.frameName+"-"+t.iterationId}).join("/"):""},t.prototype.enterFrame=function(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},t.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},t.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},t.prototype.getWeight=function(t){return this.weightMap[t]},t.prototype.addTensorArray=function(t){this.tensorArrayMap[t.id]=t},t.prototype.getTensorArray=function(t){return this.tensorArrayMap[t]},t}();function th(t,e,a){for(var r=new Set,n=[],s=null,o=null,p=new Set,i=e.slice();i.length>0;){var u=i.pop();(tb(u)||tg.indexOf(u.op)>=0)&&null==s&&(o=(s=u).children.map(function(t){return t.name}).filter(function(t){return r.has(t)})),r.add(u.name),null==a[u.name]&&null==t[u.name]&&(0!==u.inputs.length?u.inputs.forEach(function(t){p.has(t.name)||(p.add(t.name),i.push(t))}):n.push(u.name))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:n,dynamicNode:s,syncInputs:o}}var tN=["Switch","Merge","Enter","Exit","NextIteration"],tg=["NonMaxSuppressionV2","NonMaxSuppressionV3","Where"];function tb(t){return tN.indexOf(t.op)>=0}var tx=function(){function t(t){this.graph=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this.placeholders=t.placeholders,this._outputs=t.outputs}return Object.defineProperty(t.prototype,"weightMap",{get:function(){return this._weightMap},set:function(t){var e=Object.keys(t).map(function(e){return t[e].map(function(t){return t.id})});this.weightIds=[].concat.apply([],e),this._weightMap=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this.placeholders.map(function(t){return{name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this._outputs.map(function(t){return{name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.placeholders.map(function(t){return t.name})},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.outputs.map(function(t){return t.name})},enumerable:!0,configurable:!0}),t.prototype.getCompilationKey=function(t,e){var a=t.map(function(t){return t.name}).sort(),r=e.map(function(t){return t.name}).sort();return a.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)},t.prototype.compile=function(t,e){var a=th(t,e,this.weightMap),r=a.missingInputs,n=a.dynamicNode,s=a.syncInputs;if(null!=n)throw Error("This execution contains the node '"+n.name+"', which has the dynamic op '"+n.op+"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs ["+s+"]");if(r.length>0)throw Error("Cannot compute the outputs ["+e.map(function(t){return t.name})+"] from the provided inputs ["+Object.keys(t)+"]. Missing the following inputs: ["+r+"]");return function(t,e,a){var r=a.usedNodes,n=a.inputs,s=[];Object.keys(n).map(function(e){return t.nodes[e]}).forEach(function(t){r.has(t.name)&&s.push(t)}),t.weights.forEach(function(t){r.has(t.name)&&s.push(t)});for(var o=new Set,p=[];s.length>0;){var i=s.pop();o.add(i.name),e[i.name]||p.push(i),i.children.forEach(function(t){!o.has(t.name)&&r.has(t.name)&&t.inputs.every(function(t){return o.has(t.name)})&&s.push(t)})}return p}(this.graph,this.weightMap,a)},t.prototype.execute=function(t,e){var a=this,r=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),this.checkOutputs(e);var n=r.map(function(t){return a.graph.nodes[t]}),s=e.map(function(t){return a.graph.nodes[x(t)[0]]}),o=this.getCompilationKey(n,s),p=this.compiledMap.get(o);null==p&&(p=this.compile(t,s),this.compiledMap.set(o,p));var u={};return(0,i.lub)(function(){var r=new tl(a._weightMap,u),n=m({},a.weightMap);Object.keys(t).forEach(function(e){n[e]=[t[e]]});for(var s=a.getFrozenTensorIds(n),o={},i=0;i<p.length;i++){var c=p[i];if(!n[c.name]){var d=tf(c,n,r);if(d instanceof Promise)throw Error("The execution of the op '"+c.op+"' returned a promise. Please use model.executeAsync() instead.");n[c.name]=d,a.checkTensorForDisposal(c.name,c,n,r,s,e,o)}}return e.map(function(t){return N(t,n,r)})})},t.prototype.getFrozenTensorIds=function(t){var e=[].concat.apply([],Object.keys(t).map(function(e){return t[e]}).map(function(t){return t.map(function(t){return t.id})}));return new Set(e)},t.prototype.checkTensorForDisposal=function(t,e,a,r,n,s,o){"control"!==e.category&&-1===s.indexOf(t)&&(a[t].forEach(function(t){null!=t&&(o[t.id]=(o[t.id]||0)+e.children.length)}),e.inputs.forEach(function(t){if("control"!==t.category){var e=a[b(t.name,r.currentContextId)];null!=e&&e.forEach(function(t){if(t&&!n.has(t.id)){var e=o[t.id];1===e?(t.dispose(),delete o[t.id]):null!=e&&o[t.id]--}})}}))},t.prototype.executeAsync=function(t,e){return c(this,void 0,void 0,function(){var a,r,n,s,o,p,i=this;return d(this,function(u){switch(u.label){case 0:return this.checkInputs(t),this.checkInputShapeAndType(t),this.checkOutputs(e),a={},r=new tl(this._weightMap,a),[4,this.executeWithControlFlow(t,r,e)];case 1:return n=u.sent(),s=e.map(function(t){return N(t,n,r)}),o=new Set(s.map(function(t){return t.id})),p=new Set(Object.keys(t).map(function(e){return t[e].id})),Object.keys(n).forEach(function(t){n[t].forEach(function(t){!t||t.isDisposed||o.has(t.id)||p.has(t.id)||-1!==i.weightIds.indexOf(t.id)||t.dispose()})}),[2,s]}})})},t.prototype.executeWithControlFlow=function(t,e,a){return c(this,void 0,void 0,function(){var r,n,s,o,p,i,u,c,y,f,l,h,g,b,T,v=this;return d(this,function(d){switch(d.label){case 0:n=(r=Object.keys(t)).map(function(t){return v.graph.nodes[t]}),p=(o=th(t,s=a.map(function(t){return v.graph.nodes[x(t)[0]]}),this.weightMap)).usedNodes,i=o.missingInputs,u=o.dynamicNode,c=o.syncInputs,y=n.concat(this.graph.weights).map(function(t){return{node:t,contexts:e.currentContext}}),f=m({},this.weightMap),Object.keys(t).forEach(function(e){f[e]=[t[e]]}),l={},h=this.getFrozenTensorIds(f),g={},d.label=1;case 1:return y.length>0?[4,Promise.all(this.processStack(n,y,e,f,g,h,a,l,p))]:[3,3];case 2:return d.sent(),[3,1];case 3:if(null==u&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),(b=s.filter(function(t){return!tb(t)&&!N(t.name,f,e)}).map(function(t){return t.name})).length>0)throw T="",null!=u&&(T="Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs ["+c+"]"),Error("Cannot compute the outputs ["+b+"] from the provided inputs ["+r+"]. Consider providing the following inputs: ["+i+"]. "+T);return[2,f]}})})},t.prototype.processStack=function(t,e,a,r,n,s,o,p,i){for(var u=this,m=[],c=this;e.length>0;)(function(){var d=e.pop();a.currentContext=d.contexts;var y="";if("Enter"===d.node.op&&h("isConstant",d.node,r,a)&&(y=g(d.node.name,a)[0]),-1===t.indexOf(d.node)){var f=tf(d.node,r,a);y||(y=g(d.node.name,a)[0]);var l=a.currentContext;f instanceof Promise?m.push(f.then(function(t){return r[y]=t,a.currentContext=l,u.checkTensorForDisposal(y,d.node,r,a,s,o,p),u.processChildNodes(d.node,e,a,r,n,i),t})):(r[y]=f,c.checkTensorForDisposal(y,d.node,r,a,s,o,p),c.processChildNodes(d.node,e,a,r,n,i))}else c.processChildNodes(d.node,e,a,r,n,i)})();return m},t.prototype.processChildNodes=function(t,e,a,r,n,s){t.children.forEach(function(t){var o=g(t.name,a)[0];!n[o]&&s.has(t.name)&&("Merge"===t.op?t.inputNames.some(function(t){return!!N(t,r,a)})&&(n[o]=!0,e.push({contexts:a.currentContext,node:t})):t.inputNames.every(function(t){return!!N(t,r,a)})&&(n[o]=!0,e.push({contexts:a.currentContext,node:t})))})},t.prototype.dispose=function(){var t=this;Object.keys(this.weightMap).forEach(function(e){return t.weightMap[e].forEach(function(t){return t.dispose()})})},t.prototype.checkInputShapeAndType=function(t){var e=this;Object.keys(t).forEach(function(a){var r=t[a],n=e.graph.nodes[a];if(n.attrParams.shape&&n.attrParams.shape.value){var s=n.attrParams.shape.value,o=s.length===r.shape.length&&r.shape.every(function(t,e){return -1===s[e]||s[e]===t});i.D5U.assert(o,function(){return"The shape of dict['"+n.name+"'] provided in model.execute(dict) must be ["+s+"], but was ["+r.shape+"]"})}n.attrParams.dtype&&n.attrParams.dtype.value&&i.D5U.assert(r.dtype===n.attrParams.dtype.value,function(){return"The dtype of dict['"+n.name+"'] provided in model.execute(dict) must be "+n.attrParams.dtype.value+", but was "+r.dtype})})},t.prototype.checkInputs=function(t){var e=this,a=Object.keys(t).filter(function(t){return!e.graph.nodes[t]});if(a.length>0)throw Error("The dict provided in model.execute(dict) has keys: ["+a+"] that are not part of graph")},t.prototype.checkOutputs=function(t){var e=this;t.forEach(function(t){var a=x(t)[0];if(!e.graph.nodes[a])throw Error("The output '"+t+"' is not found in the graph")})},t}(),tT=function(){function t(t,e){void 0===e&&(e={}),this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}return Object.defineProperty(t.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),t.prototype.findIOHandler=function(){var t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=i.io.browserHTTPRequest(t,this.loadOptions);else{var e=i.io.getLoadHandlers(t,this.loadOptions.onProgress);if(0===e.length)e.push(i.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw Error("Found more than one ("+e.length+") load handlers for URL '"+[t]+"'");this.handler=e[0]}},t.prototype.load=function(){return c(this,void 0,void 0,function(){var t,e,a;return d(this,function(r){switch(r.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,this.handler.load()];case 1:return e=(t=r.sent()).modelTopology,this.version=e.versions.producer+"."+e.versions.minConsumer,a=i.io.decodeWeights(t.weightData,t.weightSpecs),this.executor=new tx(R.Instance.transformGraph(e)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),[2,!0]}})})},t.prototype.predict=function(t,e){return this.execute(t,this.outputNodes)},t.prototype.normalizeInputs=function(t){if(!(t instanceof i.esB||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw Error("Input tensor count mismatch,the graph model has "+this.inputNodes.length+" placeholders, while there are "+t.length+" input tensors.");return this.inputNodes.reduce(function(e,a,r){return e[a]=t[r],e},{})},t.prototype.normalizeOutputs=function(t){return Array.isArray(t=t||this.outputNodes)?t:[t]},t.prototype.execute=function(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);var a=this.executor.execute(t,e);return a.length>1?a:a[0]},t.prototype.executeAsync=function(t,e){return c(this,void 0,void 0,function(){var a;return d(this,function(r){switch(r.label){case 0:return t=this.normalizeInputs(t),e=this.normalizeOutputs(e),[4,this.executor.executeAsync(t,e)];case 1:return[2,(a=r.sent()).length>1?a:a[0]]}})})},t.prototype.convertTensorMapToTensorsMap=function(t){return Object.keys(t).reduce(function(e,a){return e[a]=[t[a]],e},{})},t.prototype.dispose=function(){this.executor.dispose()},t}();function tv(t,e){return void 0===e&&(e={}),c(this,void 0,void 0,function(){var a;return d(this,function(r){switch(r.label){case 0:if(null==t)throw Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");return null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t=""+t+"model.json?tfjs-format=file"),[4,(a=new tT(t,e)).load()];case 1:return r.sent(),[2,a]}})})}var tO="1.3.1"}}]);